{"version":3,"sources":["assets/data.js","components/NameSelector.jsx","components/TypeSelector.jsx","components/RobotBuilder.jsx","components/Leaderboard.jsx","components/Tasks.jsx","components/Interface.jsx","utils/getFiveRandom.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","tasks","description","eta","completing","types","UNIPEDAL","BIPEDAL","QUADRUPEDAL","ARACHNID","RADIAL","AERONAUTICAL","NameSelector","props","Group","controlId","Label","Control","type","placeholder","onChange","handleNameUpdate","TypeSelector","data","typesArr","Object","keys","as","handleTypeChoice","map","i","key","RobotBuilder","robots","handleBuildABot","variant","onClick","length","Leaderboard","roboClone","slice","striped","bordered","hover","size","sort","a","b","tasksCompleted","robot","placement","roboName","roboType","Tasks","currentRobot","handleDoTask","task","taskIndex","Item","action","isWorking","alert","Interface","className","Header","Body","Text","getFiveRandom","Math","random","App","state","bind","event","target","value","this","setState","fiveRandomTasks","push","currentTask","currentTasks","setTimeout","splice","md","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f13a1128.chunk.js","sourcesContent":["const tasks =\n[\n  {\n    description: 'Do the dishes',\n    eta: 1000,\n    completing: false\n  },{\n    description: 'Sweep the house',\n    eta: 3000,\n    completing: false\n  },{\n    description: 'Do the laundry',\n    eta: 10000,\n    completing: false\n  },{\n    description: 'Take out the recycling',\n    eta: 4000,\n    completing: false\n  },{\n    description: 'Make a sammich',\n    eta: 7000,\n    completing: false\n  },{\n    description: 'Mow the lawn',\n    eta: 20000,\n    completing: false\n  },{\n    description: 'Rake the leaves',\n    eta: 18000,\n    completing: false\n  },{\n    description: 'Give the dog a bath',\n    eta: 14500,\n    completing: false\n  },{\n    description: 'Bake some cookies',\n    eta: 8000,\n    completing: false\n  },{\n    description: 'Wash the car',\n    eta: 20000,\n    completing: false\n  },\n]\n\nconst types =\n{ \n  UNIPEDAL: 'Unipedal',\n  BIPEDAL: 'Bipedal',\n  QUADRUPEDAL: 'Quadrupedal',\n  ARACHNID: 'Arachnid',\n  RADIAL: 'Radial',\n  AERONAUTICAL: 'Aeronautical'\n};\n\nmodule.exports = { tasks, types }; // To be used in components","import React from 'react';\nimport Form  from 'react-bootstrap/Form';\n\nconst NameSelector = props => {\n  return (\n    <Form.Group controlId=\"roboForm.nameInput\">\n      <Form.Label>Robot Name</Form.Label>\n      <Form.Control \n        type=\"text\" \n        placeholder=\"Roy Batty\"\n        onChange={props.handleNameUpdate} \n      />\n    </Form.Group>\n  )\n}\n\nexport default NameSelector;","import React from 'react';\nimport Form  from 'react-bootstrap/Form';\n\nconst TypeSelector = props => {\n  const types = props.data.types // Object of types given in data passed down from App.js\n  const typesArr = Object.keys(types); // Array of keys from types object above\n  \n  return (\n    <Form.Group controlId=\"roboForm.typeInput\">\n      <Form.Label>Robot Type</Form.Label>\n      <Form.Control \n        as=\"select\"\n        onChange={props.handleTypeChoice}\n      >\n       {\n          // Map over array of keys from object; \n          // For each object key, search types object for its value string then build an option tag with the string...\n          typesArr.map( (type, i) => <option key={i}>{types[typesArr[i]]}</option>)\n        }\n      </Form.Control>\n    </Form.Group>\n  )\n}\n\nexport default TypeSelector;","import React        from 'react';\nimport NameSelector from './NameSelector.jsx';\nimport TypeSelector from './TypeSelector.jsx';\nimport Form         from 'react-bootstrap/Form';\nimport Button       from 'react-bootstrap/Button';\n\nconst RobotBuilder = props => {\n  const { robots, handleNameUpdate, handleBuildABot, handleTypeChoice } = props; // destructure props for ease of visibility/use\n\n  return (\n    // return a form with the NameSelector and TypeSelector components, then a submit button\n    <Form>\n      <NameSelector \n        handleNameUpdate={handleNameUpdate}\n      />\n      <TypeSelector \n        handleTypeChoice={handleTypeChoice}\n        data={props.data}\n      />\n\n      <Button \n        variant=\"primary\" \n        onClick={handleBuildABot /* updates state with tasks */}>\n        {robots.length ? `Build another Bot!` : `Build a Bot!`}\n      </Button>\n    </Form>\n  )\n}\n\nexport default RobotBuilder;","import React from 'react';\nimport Table from 'react-bootstrap/Table';\n\nconst Leaderboard = props => {\nconst { robots } = props; // destructure\nconst roboClone  = robots.slice(0); // Create a clone of robots prop to use & sort based on tasks completed\n\n  return ( // Build a table that dynamically renders rows for each Robot, updating order as tasks finish\n    <Table striped bordered hover size=\"sm\"> \n      <thead>\n        <tr>\n          <th>#</th>\n          <th>Bot-Name</th>\n          <th>Bot-Type</th>\n          <th>Tasks Completed</th>\n        </tr>\n      </thead>\n      <tbody>\n        {\n          robots.length ?  // If a robot hasn't been made: placeholder row; else, sort & render dynamically\n            roboClone.sort((a, b) => (b.tasksCompleted - a.tasksCompleted)) // sort each robot clone by tasks completed\n            .map((robot, i) => {\n              let placement = i+1;\n              return(\n                <tr key={i}>\n                  <td>{placement}</td>\n                  <td>{robot.roboName}</td>\n                  <td>{robot.roboType}</td>\n                  <td>{5 - robot.tasks.length}</td>\n                </tr>\n              );\n          }) : <tr>\n                <td>-</td>\n                <td>Build</td>\n                <td>A</td>\n                <td>Bot!</td>\n              </tr>\n        }\n      </tbody>\n    </Table>\n  )\n}\n\nexport default Leaderboard;","import React     from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\n\nconst Tasks = props => {\n\n  const { robot, currentRobot, tasks, handleDoTask } = props;\n\n  return (\n    <ListGroup variant=\"flush\">\n      { // For each task in the datafile passed from App, we will generate a react-bootstrap actionable list\n        // Each list item should have an interactive task, & dynamically rendering time to complete\n        tasks.map( (task, taskIndex ) => {\n          return (\n            <ListGroup.Item\n              key={taskIndex}\n              action onClick={() => {\n                  robot.isWorking === false ?\n                  handleDoTask(task, currentRobot, taskIndex) :\n                  alert(`${robot.roboName} is still working!`)\n                }}\n            >\n              {`${task.description} (${task.eta/1000} sec)`}\n            </ListGroup.Item>\n          )\n        })\n      }\n    </ListGroup>\n  )\n}\n\nexport default Tasks;","import React from 'react';\nimport Tasks from './Tasks.jsx';\nimport Col   from 'react-bootstrap/Col';\nimport Row   from 'react-bootstrap/Row';\nimport Card  from 'react-bootstrap/Card';\n\n\nconst Interface = props => {\n\n  const { robots, handleDoTask } = props; // deconstruct props for ease of visibility/use\n\n  return (\n    <>\n      { // For each robot in the robots state, we will build a card with a title & tasklist via Tasks component\n        robots.map( (robot, i) => (\n          <Card className=\"card\" key={i}> {/* A key will allow us to uniquely identify each card by its mapping index */}\n              <Card.Header as=\"h5\">\n                {robot.roboName} the {robot.roboType}'s Tasks:\n              </Card.Header>\n            <Card.Body>\n              <Card.Text>\n                  {robot.isWorking ? `${robot.roboName} is working...` : null}\n              </Card.Text>\n            </Card.Body>\n              <Col>\n                <Row>\n                  <Tasks \n                    robot={robot}\n                    currentRobot={i}\n                    tasks={robot.tasks} \n                    handleDoTask={handleDoTask}\n                  />\n                </Row>\n              </Col>\n          </Card>\n        ))\n      }\n    </>\n  )\n}\n\nexport default Interface;","const getFiveRandom = tasks => {\n  const shuffled = tasks.sort(() => 0.5 - Math.random());\n  let randomFive = shuffled.slice(0, 5);\n  return randomFive;\n}\n\nexport default getFiveRandom; ","import React         from 'react';\nimport data          from './assets/data.js';\nimport RobotBuilder  from './components/RobotBuilder.jsx';\nimport Leaderboard   from './components/Leaderboard.jsx';\nimport Interface     from './components/Interface.jsx';\nimport Container     from 'react-bootstrap/Container';\nimport Col           from 'react-bootstrap/Col';\nimport Row           from 'react-bootstrap/Row';\nimport getFiveRandom from './utils/getFiveRandom';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n      this.state = { \n        robots            : [],\n        roboName          : '',\n        roboType          : ''\n     };\n\n    // bind our handlers to this context for prop usage\n    this.handleNameUpdate = this.handleNameUpdate.bind(this);\n    this.handleTypeChoice = this.handleTypeChoice.bind(this);\n    this.handleBuildABot  = this.handleBuildABot.bind(this);\n    this.handleDoTask     = this.handleDoTask.bind(this);\n  };\n\n  handleNameUpdate(event) { // Update state as a user enters text into the robot text field\n    const roboName = event.target.value;\n    this.setState({roboName : roboName});\n  };\n\n  handleTypeChoice(event) { // Update state as a user chooses a robot type from the select field\n    const roboType = event.target.value;\n    this.setState({roboType : roboType});\n  };\n\n  handleBuildABot() { // Generate a list of 5 random tasks from assets/data.js; form is satisfied, build a robot into state\n    const tasks = data.tasks\n    const fiveRandomTasks = getFiveRandom(tasks);\n\n    if (this.state.roboName === '' || this.state.roboType === '') {\n      alert('Please give your poor robot both a name and a type!');\n\n    } else {\n      const robots = this.state.robots; // clone robots state to modify it before using this var to reset state\n      const robot = {}; // Build a new robot object, then set its properties before adding it into our [robots] state\n        robot.roboName       = this.state.roboName;\n        robot.roboType       = this.state.roboType;\n        robot.tasksCompleted = 0;\n        robot.isWorking      = false;\n        robot.tasks          = fiveRandomTasks;\n      robots.push(robot);\n      this.setState({robots : robots});\n    };\n  };\n\n  handleDoTask(task, currentRobot, currentTask) {\n    // Clone robots state\n    let robots = this.state.robots;\n    let currentTasks = robots[currentRobot].tasks;\n\n    // Access clicked task object & set completing to true for conditional rendering, update state\n    robots[currentRobot].tasks[currentTask].completing = true;\n    robots[currentRobot].isWorking = true;\n    this.setState({robots: robots});\n    \n    // After ms specified in current task object eta property, remove task from robot clone and update state from clone\n    setTimeout(() => {\n      currentTasks.splice(currentTask, 1);\n      robots[currentRobot].isWorking = false;\n      robots[currentRobot].tasksCompleted++;\n      this.setState({robots: robots});\n    }, task.eta); \n  };\n\n  render() {\n    const { robots } = this.state; // destructure our state to be easily passed down as props\n\n    /* \n    React-Bootstrap follows a similar grid pattern to Bootstrap\n    */\n\n    return(\n      <div className=\"App\">\n        <Container>\n          <br />\n          <Row>\n            <Col></Col>\n            <Col md=\"auto\"><h1>Bot-O-Mat</h1></Col>\n            <Col></Col>\n          </Row>\n\n          <hr />\n          <br />\n\n          <Row>\n            <Col md=\"2\"></Col>\n            <Col md=\"4\">\n              <RobotBuilder // robot building user interface takes handlers and file data\n                robots={robots}\n                handleNameUpdate={this.handleNameUpdate}\n                handleTypeChoice={this.handleTypeChoice}\n                handleBuildABot={this.handleBuildABot}\n                data={data}\n              />\n            </Col>\n            <Col md=\"4\">\n              <Row>\n                <Col></Col>\n                <Col md=\"auto\"><h5>Robo-Leaderboard</h5></Col>\n                <Col></Col>\n              </Row>\n              <Row>\n                <Leaderboard // Leaderboard references robots array from state\n                  robots={robots}\n                />\n              </Row>\n            </Col>\n            <Col md=\"2\"></Col>\n          </Row>\n\n          <br />\n          {robots.length ? <hr /> : <></>}\n\n          <Row>\n            <Col></Col>\n            <Col md=\"auto\">\n              <br></br>\n              <Row>\n                {/* Conditionally render each robot's list of tasks if at least 1 robot exists in the state */}\n                {robots.length ? \n                <Interface  // Interface dynamically renders tasklist cards for each robot passed from state\n                  robots={robots}\n                  handleDoTask={this.handleDoTask}\n                /> :\n                <></>}\n              </Row>\n            </Col>\n            <Col></Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  };\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();"],"sourceRoot":""}